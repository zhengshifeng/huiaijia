package com.flf.controller;

import com.base.criteria.Criteria;
import com.base.criteria.VillageManagerCriteria;
import com.base.util.HttpUtil;
import com.flf.entity.*;
import com.flf.mapper.HajFrontUserMapper;
import com.flf.service.*;
import com.flf.util.*;
import com.flf.util.wms.WmsSender;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;

/**
 * 
 * 汇爱家后台小区管理Controller
 * 
 */

@Controller
public class HajVillageManagerController {

	@Autowired(required = false)
	private HajCommunityPersionService hajCommunityPersionService;

	@Autowired(required = false)
	private HajOrderService hajOrderService;

	@Autowired(required = false)
	private HajCommunityPersionCommentService hajCommunityPersionCommentService;

	@Autowired(required = false)
	private HajUserReportService hajUserReportService;

	@Autowired(required = false)
	private HajAreasService areasService;

	@Autowired
	private HajFrontUserMapper userDao;

	@Autowired(required = false)
	private IHajSMSPushService hajSMSPushService;

	@Autowired(required = false)
	private SystemConfigurationService systemConfigurationService;

	@Autowired(required = false)
	private HajWarehouseService hajWarehouseService;

	/**
	 * 
	 * 小区列表
	 * 
	 */
	@RequestMapping(value = "/villageList")
	public ModelAndView villageList(HttpSession session, VillageManagerCriteria criteria) {
		ModelAndView mv = new ModelAndView();
		try {
			User user = (User) session.getAttribute(Const.SESSION_USER);
			if (null != user) {
				criteria.setAreaCode(user.getAreaCode());
			}
			List<Map<String, Object>> villageList = hajCommunityPersionService.queryVillageManagerList(criteria);

			String provinceCode = criteria.getProvinceCode();
			String cityCode = criteria.getCityCode();
			areasService.putAreaList(mv, provinceCode, cityCode);

			// 获取会员计划数量list
			String[] memberPlanNumList = getMemberPlanNumList();
			mv.addObject("memberPlanNumList", memberPlanNumList);

			mv.addObject("villageList", villageList);
			mv.addObject("criteria", criteria);
			mv.setViewName("villageList");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}

	/**
	 * 
	 * 小区订单统计
	 * 
	 */
	@RequestMapping(value = "/villageCount")
	public ModelAndView villageCount(HttpSession session, VillageManagerCriteria criteria) {
		ModelAndView mv = new ModelAndView();
		try {
			User user = (User) session.getAttribute(Const.SESSION_USER);
			Map<String, Object> villageMap = new HashMap<String, Object>();
			if (null != user) {
				criteria.setAreaCode(user.getAreaCode());
			}
			List<Map<String, Object>> villageList = hajCommunityPersionService.villageCount(criteria);
			// 统计
			// villageMap =
			// hajCommunityPersionService.villageMapCount(criteria);

			Map<String, Object> villageMap1 = hajCommunityPersionService.villageMapCount1(criteria);
			villageMap.put("hisOrderNum", villageMap1.get("hisOrderNum"));
			villageMap.put("orderTotalMoney", villageMap1.get("orderTotalMoney"));
			villageMap.put("profitlossTotalMoney", villageMap1.get("profitlossTotalMoney"));
			DecimalFormat df = new DecimalFormat("######0.00");
			villageMap.put(
					"dayAvgNum",
					Integer.parseInt(villageMap1.get("hisOrderNum").toString())
							/ Integer.parseInt(villageMap1.get("dayNumber").toString()));
			villageMap.put(
					"dayAvgMoney",
					df.format(Double.parseDouble(villageMap1.get("orderTotalMoney").toString())
							/ Double.parseDouble(villageMap1.get("dayNumber").toString())));
			villageMap.put(
					"dayAvgProfitlossMoney",
					df.format(Double.parseDouble(villageMap1.get("profitlossTotalMoney").toString())
							/ Double.parseDouble(villageMap1.get("dayNumber").toString())));

			Map<String, Object> villageMap2 = hajCommunityPersionService.villageMapCount2(criteria);
			villageMap.put("lastSevenDaysOrderNum", villageMap2.get("lastSevenDaysOrderNum"));
			villageMap.put("lastSevenDaysAvg", villageMap2.get("lastSevenDaysAvg"));
			villageMap.put("profitlossSevenDaysMoney", villageMap2.get("profitlossSevenDaysMoney"));

			Map<String, Object> villageMap3 = hajCommunityPersionService.villageMapCount3(criteria);
			villageMap.put("todayOrderNum", villageMap3.get("todayOrderNum"));
			villageMap.put("todayMoney", villageMap3.get("todayMoney"));
			villageMap.put("todayprofitloss", villageMap3.get("todayprofitloss"));

			String provinceCode = criteria.getProvinceCode();
			String cityCode = criteria.getCityCode();
			areasService.putAreaList(mv, provinceCode, cityCode);

			// 获取会员计划数量list
			String[] memberPlanNumList = getMemberPlanNumList();
			mv.addObject("memberPlanNumList", memberPlanNumList);

			mv.addObject("villageList", villageList);
			mv.addObject("villageMap", villageMap);
			mv.addObject("criteria", criteria);
			mv.setViewName("villageCount");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}

	/**
	 * 
	 * 根据小区编号，或者小区名称精确查找小区信息以及相关订单信息
	 * 
	 */
	@RequestMapping(value = "/exactSearchVillage")
	public ModelAndView exactSearchVillage(@RequestParam String parameter, @RequestParam String page,
			HttpSession session) {
		ModelAndView mv = new ModelAndView();
		try {
			String areaCode = "";
			User user = (User) session.getAttribute(Const.SESSION_USER);
			if (null != user) {
				areaCode = user.getAreaCode();
			}

			Map<String, Object> village = hajCommunityPersionService.exactSearchVillage(parameter.trim(), areaCode);
			List<Map<String, Object>> villageList = new ArrayList<Map<String, Object>>();
			if (village != null) {
				villageList.add(village);
			}
			if (page.equals("villageUpdate") || page.equals("villageView")) {
				// 省份数据列表
				List<HajAreas> areaList = areasService.getAreaByPCode("0");
				mv.addObject("provinceList", areaList);
				if (village != null) {
					String communityCode = (String) village.get("communityCode");
					if (communityCode != null && !"".equals(communityCode)) {
						// 拿出该小区区或者县级信息
						HajAreas areaByCode1 = areasService.getAreaByCode(communityCode);
						mv.addObject("areaByCode1", areaByCode1);
						// 拿出该小区市级信息
						HajAreas areaByCode2 = areasService.getAreaByCode(areaByCode1.getPCode());
						mv.addObject("areaByCode2", areaByCode2);
						// 获取该小区省级code
						String code = areaByCode2.getPCode();
						// 拿出该小区省级信息
						HajAreas areaByCode3 = areasService.getAreaByCode(code);
						mv.addObject("areaByCode3", areaByCode3);
						// 获取小区所属省级下面所以市级信息
						if (Tools.notEmpty(code) && !"0".equals(code)) {
							areaList = areasService.getAreaByPCode(code);
							mv.addObject("cityList", areaList);
						}
						// 获取小区所属市级下面所以区或者县级信息
						if (Tools.notEmpty(areaByCode1.getPCode()) && !"0".equals(areaByCode1.getPCode())) {
							areaList = areasService.getAreaByPCode(areaByCode1.getPCode());
							mv.addObject("communityList", areaList);
						}
					}
				}
			}

			List<Map<String, Object>> warehouseList = hajWarehouseService.getAllWareHouseList(areaCode);
			mv.addObject("warehouseList", warehouseList);
			// 获取会员计划数量list
			String[] memberPlanNumList = getMemberPlanNumList();
			mv.addObject("memberPlanNumList", memberPlanNumList);

			mv.addObject("village", village);
			mv.addObject("villageList", villageList);
			mv.addObject("parameter", parameter);
			mv.setViewName(page);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}

	/**
	 * 小区管理查看详情：用于处理分页查看售后评论记录
	 * 
	 * @throws IOException
	 * 
	 */
	@RequestMapping(value = "/afterSaleComment")
	public ModelAndView afterSaleComment(@RequestParam Integer page, @RequestParam Integer communityId,
			HttpServletResponse response, HttpServletRequest request) throws IOException {
		Map<String, Object> condition = new HashMap<String, Object>();
		condition.put("communityId", communityId);
		Criteria criteria = new Criteria();
		criteria.setCondition(condition);
		criteria.setPageSize(10);
		criteria.setCurrentPage(page);
		criteria.setOrderByClause("id desc");
		ModelAndView mv = new ModelAndView();
		try {
			List<HajCommunityPersionComment> commentList = hajCommunityPersionCommentService.queryByList(criteria);
			mv.addObject("commentList", commentList);
			mv.addObject("page", page);
			mv.addObject("communityId", communityId);
			mv.setViewName("afterSaleComment");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}

	/**
	 * 小区管理查看详情：统计时间段区间订单数，平均订单金额，所以订单金额
	 * 
	 * @throws IOException
	 * 
	 */
	@RequestMapping(value = "/orderCountForResidential")
	public void orderCountForResidential(@RequestParam String beginTime, @RequestParam String overTime,
			@RequestParam String villageId, HttpServletResponse response) throws IOException {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("beginTime", beginTime);
		map.put("overTime", overTime);
		map.put("villageId", villageId);
		try {
			Map<String, Object> orderCount = hajOrderService.orderCountByTimeForResidential(map);
			map.put("orderCount", orderCount);
			map.put("success", "true");
		} catch (Exception e) {
			e.printStackTrace();
		}
		JSONUtils.printObject(map, response);
	}

	/**
	 * 后台小区管理根据小区id更新小区信息
	 * 
	 */
	@RequestMapping(value = "/updateHajCommunityPersionById")
	public void updateHajCommunityPersionById(HajCommunityPersion persion, HttpServletResponse response) {
		try {
			HajCommunityPersion queryById = hajCommunityPersionService.queryById(persion.getId());
			int status = persion.getStatus();

			// 小区之前为未激活，本次更新为激活状态，才需短信推送
			if (queryById.getStatus() == 0 && status == 1) {

				// 会员人数更新为等于预约人数
				persion.setMembersNumber(persion.getAppointmentNum());

				// 预约人数清零
				persion.setAppointmentNum(0);

				// 配送中
				persion.setDistributionStatus(1);

				// 将该小区所有预备会员改为正式会员
				String communityName = persion.getCommunityName();

				// 手动激活小区，预备会员转为会员
				userDao.updateAllMemberStatus(queryById.getId());

				// 小区手动激活发送推送短信
				hajSMSPushService.villageActivateSMSPush(communityName);

				// 记录激活时间
				persion.setActivationTime(DateUtil.datetime2Str(new Date()));
			}

			persion.setNeedPostFee(persion.getNeedPostFee() == null ? 0 : 1);
			hajCommunityPersionService.updateBySelective(persion);
			hajCommunityPersionService.createCommodityIndex(persion.getId());

			// 更新用户地址
			HajFrontUser user = new HajFrontUser();
			user.setShippingAddress(persion.getAddress());
			user.setVillageId(persion.getId());
			userDao.updateUserShippingAddress(user);

			// 同步修改小区至WMS
			WmsSender.receiveCommunity(persion);

			JSONUtils.printObject("{status:'success'}", response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 后台小区管理根据id删除信息
	 *
	 */
	@RequestMapping(value = "/deleteById")
	public void deleteById(@RequestParam Integer id, HttpServletResponse response) {
		try {
			hajCommunityPersionService.delete(id);
			hajCommunityPersionService.deleteCommunityPersionIndex(id);
			JSONUtils.printObject("{status:'success'}", response);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * 后台小区管理添加小区相关信息
	 * 
	 */
	@RequestMapping(value = "/addVillage")
	public void addVillage(HajCommunityPersion persion, HttpServletResponse response) {
		try {
			persion.setCommunityName(persion.getCommunityName().trim());
			HajAreas area = areasService.getAreaByCode(persion.getCommunityCode());
			if (null != area) {
				persion.setAreaCode(area.getPCode());
			}
			Map<String, Object> exactSearchVillage = hajCommunityPersionService.queryCommunityPersion(persion);
			if (exactSearchVillage != null) {
				JSONUtils.printObject("{status:'该小区名已经存在，请更换小区名字!'}", response);
			} else {
				persion.setCreateTime(DateUtil.datetime2Str(new Date()));
				persion.setNeedPostFee(persion.getNeedPostFee() == null ? 0 : 1);
				persion.setDistributionStatus(0);
				hajCommunityPersionService.add(persion);
				hajCommunityPersionService.createCommodityIndex(persion.getId());
				JSONUtils.printObject("{status:'success'}", response);

				// 同步新增小区至WMS
				WmsSender.receiveCommunity(persion);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/addCommunity")
	public ModelAndView toAddjsp() {
		ModelAndView mv = new ModelAndView();
		try {
			// 省份数据列表
			List<HajAreas> areaList = areasService.getAreaByPCode("0");
			mv.addObject("provinceList", areaList);
			mv.setViewName("addCommunity");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}

	/**
	 * 上传配送人头像
	 * 
	 */
	@RequestMapping(value = "/uploadfile")
	public void uploadfile(@RequestParam("fileName") MultipartFile file, HttpServletResponse response,
			HttpServletRequest request) {
		try {

			String subPath = "village" + File.separator + DateUtil.date2Str(new Date(), false) + File.separator;
			String filePath = FileUpload.uploadFile(file, subPath, request);
			Map<String, Object> json = new HashMap<String, Object>();
			if (!"".equals(filePath)) {
				json.put("uploadFile", filePath);
				json.put("status", "success");
			} else {
				json.put("status", "error");
			}
			JSONUtils.printObject(json, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 从excel中批量导入小区
	 * 
	 * @throws Exception
	 */
	@RequestMapping(value = "/batchImportVillage", method = RequestMethod.POST)
	public void batchImport(@RequestParam("fileName") MultipartFile file, HttpServletResponse response)
			throws Exception {
		response.setContentType("application/json;charset=UTF-8");

		String subPath = "xlsx" + File.separator + "village" + File.separator;
		String filePath = FileUpload.uploadExcel(file, subPath);

		String result = hajCommunityPersionService.batchImport(filePath);
		Map<String, Object> resultMap = new HashMap<>();
		resultMap.put("result", result);
		JSONUtils.printObject(resultMap, response);
	}

	/**
	 * 批量修改小区
	 * 
	 * @param file
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value = "/batchUpdateVillage", method = RequestMethod.POST)
	public void batchUpdateVillage(@RequestParam("fileName") MultipartFile file, HttpServletResponse response)
			throws Exception {
		response.setContentType("application/json;charset=UTF-8");

		String subPath = "xlsx" + File.separator + "village" + File.separator;
		String filePath = FileUpload.uploadExcel(file, subPath);

		String result = hajCommunityPersionService.batchUpdate(filePath);
		Map<String, Object> resultMap = new HashMap<>();
		resultMap.put("result", result);
		JSONUtils.printObject(resultMap, response);
	}

	/**
	 * 
	 * 获取用户上报信息
	 * 
	 */
	@RequestMapping(value = "/userReport")
	public ModelAndView queryUserReport(VillageManagerCriteria criteria) {
		ModelAndView mv = new ModelAndView();
		try {
			// 去掉字符前后空格
			if (criteria.getArea() != null) {
				criteria.setArea(criteria.getArea().trim());
			}

			List<Map<String, Object>> listPageReport = hajUserReportService.listPageReport(criteria);
			mv.addObject("listPageReport", listPageReport);
			mv.addObject("criteria", criteria);
			mv.setViewName("userReport");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}

	/**
	 * 获取会员计划数量list
	 */
	public String[] getMemberPlanNumList() {
		String[] memberPlanNumList;
		SystemConfiguration configurationByName = systemConfigurationService.getConfigurationByName("memberPlanNum");
		String planNum = configurationByName.getValue();
		memberPlanNumList = planNum.split(",");
		return memberPlanNumList;
	}

	/**
	 * 导出全部小区
	 * 
	 * @author SevenWong<br>
	 * @date 2016年7月25日下午3:16:37
	 * @param response
	 * @throws IOException
	 */
	@RequestMapping(value = "/exportCommunity")
	public void exportCommunity(HttpServletRequest request, HttpServletResponse response,
			VillageManagerCriteria criteria) throws IOException {
		User user = (User) request.getSession().getAttribute(Const.SESSION_USER);
		String areaCode = null;
		if (null != user) {
			areaCode = user.getAreaCode();
		}
		criteria.setAreaCode(areaCode);
		XSSFWorkbook wb = hajCommunityPersionService.exportCommunity(criteria);
		String filename = HttpUtil.encodeFilename(request, "小区列表");
		ExcelUtil.output(response, filename, wb);
	}

	/**
	 * 导出全部用户上报小区
	 */
	@RequestMapping(value = "/exportUserReport")
	public void exportUserReport(HttpSession session, VillageManagerCriteria criteria, HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		User user = (User) session.getAttribute(Const.SESSION_USER);
		if (null != user) {
			criteria.setAreaCode(user.getAreaCode());
		}

		XSSFWorkbook wb = hajUserReportService.exportUserReport(criteria);
		String filename = HttpUtil.encodeFilename(request, "用户上报小区");
		ExcelUtil.output(response, filename, wb);
	}

}
