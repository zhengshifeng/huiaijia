package com.flf.controller;

import com.flf.entity.Menu;
import com.flf.entity.Role;
import com.flf.entity.User;
import com.flf.service.HajAreasService;
import com.flf.service.MenuService;
import com.flf.service.UserService;
import com.flf.util.*;
import com.flf.util.geetest.GeetestConfig;
import net.sf.json.JSONArray;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.*;

@Controller
public class LoginController {

	private static final Logger log = Logger.getLogger(LoginController.class);

	@Autowired
	private UserService userService;

	@Autowired
	private MenuService menuService;

	@Autowired
	private HajAreasService areasService;

	/**
	 * 访问登录页
	 */
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String loginGet() {
		return "login";
	}

	/**
	 * 请求登录，验证用户
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public void loginPost(HttpSession session, HttpServletResponse response,
						  @RequestParam String loginname, @RequestParam String password) {
		Map<String, String> jsonMap = new HashMap<>();
		log.info("后台登录进行中...");
		String errInfo = "success";

		 boolean validated = true;
//    	boolean validated = (boolean) session.getAttribute(GeetestConfig.GEETEST_VALIDATED);
		if (validated) {
			password = MD5.MD5Encode(password);
			User user = userService.getUserByNameAndPwd(loginname, password);
			if (user != null) {
				user.setLastLogin(new Date());
				userService.updateLastLogin(user);
				session.setAttribute(Const.SESSION_USER, user);

				// 如果默认用户拥有切换后台管理城市的权限，则设为true
				boolean iCanChangeManageCity = Tools.isEmpty(user.getAreaCode());
				session.setAttribute(Const.I_CAN_CHANGE_MANAGE_CITY, iCanChangeManageCity);
			} else {
				errInfo = "用户名或密码有误！";
			}
		} else {
			errInfo = "验证错误！";
		}

		jsonMap.put("msg", errInfo);
		try {
			JSONUtils.printObject(jsonMap, response);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 访问系统首页
	 * 
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/index")
	public String index(HttpSession session, Model model) {
		User userSession = (User) session.getAttribute(Const.SESSION_USER);
		if (null != userSession) {
			User user  = userService.getUserAndRoleById(userSession.getUserId());
			Role role = user.getRole();
			String roleRights = role != null ? role.getRights() : "";
			String userRights = user.getRights();

			// 避免每次拦截用户操作时查询数据库，以下将用户所属角色权限、用户权限限都存入session
			session.setAttribute(Const.SESSION_ROLE_RIGHTS, roleRights); // 将角色权限存入session
			session.setAttribute(Const.SESSION_USER_RIGHTS, userRights); // 将用户权限存入session

			List<Menu> menuList;
			menuList = new ArrayList<>();

			List<Menu> allMenu = menuService.listAllMenu();
			if (Tools.notEmpty(roleRights)) {
				for (Menu menu : allMenu) {
					menu.setIcon(null);
					menu.setOpen(true);
					menu.setHasMenu(RightsHelper.testRights(roleRights, menu.getMenuId()));

					if (menu.isHasMenu()) {
						menuList.add(menu);

						List<Menu> subMenuList = menu.getSubMenu();
						menu.setParentFlag(subMenuList.size() > 0);
						for (Menu sub : subMenuList) {
							sub.setIcon(null);
							sub.setHasMenu(RightsHelper.testRights(roleRights, sub.getMenuId()));
							sub.setSubMenu(null);
							sub.setOpen(true);
							if (sub.isHasMenu()) {
								menuList.add(sub);
							}
						}
					}
					menu.setSubMenu(null);
				}
			}
			JSONArray arr = JSONArray.fromObject(menuList);
			String json = arr.toString();
			json = json.replaceAll("menuId", "id")
					.replaceAll("menuName", "name")
					.replaceAll("parentFlag", "isParent")
					.replace("parentId","pId");
			model.addAttribute("zTreeNodes", json);

			user.setAreaCode(userSession.getAreaCode());
			model.addAttribute("user", user);
			model.addAttribute("menuList", menuList);
			model.addAttribute("cityList", areasService.listCity());

			return "index";
		} else {
			return "login";
		}
	}

	/**
	 * 进入首页后的默认页面
	 * 
	 * @return
	 */
	@RequestMapping(value = "/default")
	public String defaultPage() {
		return "default";
	}

	/**
	 * 用户注销
	 * 
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/logout")
	public String logout(HttpSession session) {
		session.removeAttribute(Const.SESSION_USER);
		session.removeAttribute(Const.SESSION_ROLE_RIGHTS);
		session.removeAttribute(Const.SESSION_USER_RIGHTS);
		return "login";
	}

	/**
	 *
	 * @param areaCode
	 * @param response
	 * @param session
	 */
	@RequestMapping(value = "/changeManageCity")
	public void changeCity(String areaCode, HttpServletResponse response, HttpSession session) {
		Map<String, Object> jsonMap = new HashMap<>();
		try {
			User userSession = (User) session.getAttribute(Const.SESSION_USER);
			boolean iCanChangeManageCity = (boolean) session.getAttribute(Const.I_CAN_CHANGE_MANAGE_CITY);
			if (iCanChangeManageCity) {
				userSession.setAreaCode(areaCode);
				session.setAttribute(Const.SESSION_USER, userSession);
			}
			jsonMap.put("error", "0");
			jsonMap.put("msg", "成功");
		} catch (Exception e) {
			jsonMap.put("error", "1");
			jsonMap.put("msg", "未知异常");
			e.printStackTrace();
		} finally {
			try {
				JSONUtils.printObject(jsonMap, response);
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
	}

}
